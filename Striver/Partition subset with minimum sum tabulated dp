#include <bits/stdc++.h>
using namespace std;

#define all(x) (x).begin(), (x).end()
#define allr(x) (x).rbegin(), (x).rend()
#define gsize(x) (int)((x).size())
#define int long long
#define endl '\n'
#define optimize()                \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
bool comparePairs(const pair<int, int> &a, const pair<int, int> &b)
{
    if (a.first != b.first)
        return a.first < b.first;
    return a.second < b.second;
}

int mod = 1e6 + 9;
int ct = 0;
void solve()
{
}
int fnd(vector<int> &arr, vector<vector<int>> &dp, int k, int n, int sum)
{
    if (n < 0)
        return abs((k - sum) - sum);
    if (dp[n][sum] != -1)
        return dp[n][sum];
    int l = fnd(arr, dp, k, n - 1, sum + arr[n]);
    int r = fnd(arr, dp, k, n - 1, sum);
    return dp[n][sum] = min(l, r);
}
signed main()
{
    optimize();
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    int k = accumulate(all(arr), 0);
    vector<vector<int>> dp(n, vector<int>(k + 1, 0));
    for (int i = 0; i < n; i++)
    {
        dp[i][0] = 1;
    }
    dp[0][arr[0]] = 1;
    for (int i = 1; i < n; i++)
    {
        for (int j = 1; j <= k; j++)
        {
            int l = 0, r = 0;
            if ((j - arr[i]) >= 0)
                l = dp[i - 1][j - arr[i]];
            r = dp[i - 1][j];
            dp[i][j] = l | r;
        }
    }
    int mn = INT_MAX;
    for (int i = 1; i <= k; i++)
    {
        if (dp[n - 1][i] == 1)
            mn = min(mn, abs((k - i) - i));
    }
    cout << mn << endl;
    return 0;
}
